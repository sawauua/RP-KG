Obfuscated Gradients Give a False Sense of Security:
Circumventing Defenses to Adversarial Examples
Anish Athalye* 1Nicholas Carlini* 2David Wagner2
Abstract
We identify obfuscated gradients, a kind of gradi-
ent masking, as a phenomenon that leads to a false
sense of security in defenses against adversarial
examples. While defenses that cause obfuscated
gradients appear to defeat iterative optimization-
based attacks, we Ô¨Ånd defenses relying on this
effect can be circumvented. We describe charac-
teristic behaviors of defenses exhibiting the effect,
and for each of the three types of obfuscated gra-
dients we discover, we develop attack techniques
to overcome it. In a case study, examining non-
certiÔ¨Åed white-box-secure defenses at ICLR 2018,
we Ô¨Ånd obfuscated gradients are a common occur-
rence, with 7 of 9 defenses relying on obfuscated
gradients. Our new attacks successfully circum-
vent 6 completely, and 1 partially, in the original
threat model each paper considers.
1. Introduction
In response to the susceptibility of neural networks to adver-
sarial examples (Szegedy et al., 2013; Biggio et al., 2013),
there has been signiÔ¨Åcant interest recently in constructing de-
fenses to increase the robustness of neural networks. While
progress has been made in understanding and defending
against adversarial examples in the white-box setting, where
the adversary has full access to the network, a complete
solution has not yet been found.
As benchmarking against iterative optimization-based at-
tacks (e.g., Kurakin et al. (2016a); Madry et al. (2018);
Carlini & Wagner (2017c)) has become standard practice in
evaluating defenses, new defenses have arisen that appear to
be robust against these powerful optimization-based attacks.
We identify one common reason why many defenses provide
*Equal contribution1Massachusetts Institute of Technol-
ogy2University of California, Berkeley. Correspondence
to: Anish Athalye <aathalye@mit.edu >, Nicholas Carlini
<npc@cs.berkeley.edu >.
Proceedings of the 35thInternational Conference on Machine
Learning , Stockholm, Sweden, PMLR 80, 2018. Copyright 2018
by the author(s).apparent robustness against iterative optimization attacks:
obfuscated gradients , a term we deÔ¨Åne as a special case of
gradient masking (Papernot et al., 2017). Without a good
gradient, where following the gradient does not successfully
optimize the loss, iterative optimization-based methods can-
not succeed. We identify three types of obfuscated gradients:
shattered gradients are nonexistent or incorrect gradients
caused either intentionally through non-differentiable op-
erations or unintentionally through numerical instability;
stochastic gradients depend on test-time randomness; and
vanishing/exploding gradients in very deep computation
result in an unusable gradient.
We propose new techniques to overcome obfuscated gradi-
ents caused by these three phenomena. We address gradient
shattering with a new attack technique we call Backward
Pass Differentiable Approximation, where we approximate
derivatives by computing the forward pass normally and
computing the backward pass using a differentiable approx-
imation of the function. We compute gradients of random-
ized defenses by applying Expectation Over Transforma-
tion (Athalye et al., 2017). We solve vanishing/exploding
gradients through reparameterization and optimize over a
space where gradients do not explode/vanish.
To investigate the prevalence of obfuscated gradients and
understand the applicability of these attack techniques, we
use as a case study the ICLR 2018 non-certiÔ¨Åed defenses
that claim white-box robustness. We Ô¨Ånd that obfuscated
gradients are a common occurrence, with 7 of 9 defenses
relying on this phenomenon. Applying the new attack tech-
niques we develop, we overcome obfuscated gradients and
circumvent 6 of them completely, and 1 partially, under the
original threat model of each paper. Along with this, we
offer an analysis of the evaluations performed in the papers.
Additionally, we hope to provide researchers with a common
baseline of knowledge, description of attack techniques,
and common evaluation pitfalls, so that future defenses can
avoid falling vulnerable to these same attack approaches.
To promote reproducible research, we release our re-
implementation of each of these defenses, along with imple-
mentations of our attacks for each.1
1https://github.com/anishathalye/obfuscated-gradientsObfuscated Gradients Give a False Sense of Security: Circumventing Defenses to Adversarial Examples
2. Preliminaries
2.1. Notation
We consider a neural network f()used for classiÔ¨Åcation
wheref(x)irepresents the probability that image xcor-
responds to label i. We classify images, represented as
x2[0;1]whcfor ac-channel image of width wand height
h. We usefj()to refer to layer jof the neural network, and
f1::j()the composition of layers 1throughj. We denote
the classiÔ¨Åcation of the network as c(x) =arg maxif(x)i,
andc(x)denotes the true label.
2.2. Adversarial Examples
Given an image xand classiÔ¨Åer f(), an adversarial example
(Szegedy et al., 2013) x0satisÔ¨Åes two properties: D(x;x0)
is small for some distance metric D, andc(x0)6=c(x).
That is, for images, xandx0appear visually similar but x0
is classiÔ¨Åed incorrectly.
In this paper, we use the `1and`2distortion metrics to mea-
sure similarity. Two images which have a small distortion
under either of these metrics will appear visually identical.
We report`1distance in the normalized [0;1]space, so that
a distortion of 0:031corresponds to 8=256, and`2distance
as the total root-mean-square distortion normalized by the
total number of pixels (as is done in prior work).
2.3. Datasets & Models
We evaluate these defenses on the same datasets on which
they claim robustness.
If a defense argues security on MNIST and any other dataset,
we only evaluate the defense on the larger dataset. On
MNIST and CIFAR-10 , we evaluate defenses over the en-
tire test set and generate untargeted adversarial examples.
On ImageNet, we evaluate over 1000 randomly selected
images in the test set, construct targeted adversarial exam-
ples with randomly selected target classes, and report attack
success rate in addition to model accuracy. Generating tar-
geted adversarial examples is a strictly harder problem that
we believe is a more meaningful metric for evaluating at-
tacks.2Conversely, for a defender, the harder task is to
argue robustness to untargeted attacks.
We use standard models for each dataset. For MNIST we
use a standard 5-layer convolutional neural network which
reaches 99:3%accuracy. On CIFAR-10 we train a wide
ResNet (Zagoruyko & Komodakis, 2016; He et al., 2016)
to95% accuracy. For ImageNet we use the InceptionV3
(Szegedy et al., 2016) network which reaches 78:0%top-1
and93:9%top-5 accuracy.
2MisclassiÔ¨Åcation is a less meaningful metric on ImageNet,
where a misclassiÔ¨Åcation of closely related classes (e.g., a German
shepherd classiÔ¨Åed as a Doberman) may not be meaningful.2.4. Threat Models
Prior work considers adversarial examples in white-box and
black-box threat models. In this paper, we consider defenses
designed for the white-box setting, where the adversary has
full access to the neural network classiÔ¨Åer (architecture and
weights) and defense, but not test-time randomness (only
the distribution). We evaluate each defense under the threat
model under which it claims to be secure (e.g., bounded `1
distortion of = 0:031). It often easy to Ô¨Ånd impercepti-
bly perturbed adversarial examples by violating the threat
model, but by doing so under the original threat model, we
show that the original evaluations were inadequate and the
resultant claims of security were incorrect.
2.5. Attack Methods
We construct adversarial examples with iterative
optimization-based methods. For a given instance
x, these attacks attempt to search for a such that
c(x+)6=c(x)either minimizing kk, or maximizing
the classiÔ¨Åcation loss on f(x+). To generate `1bounded
adversarial examples we use Projected Gradient Descent
(PGD) conÔ¨Åned to a speciÔ¨Åed `1ball; for`2, we use the
Lagrangian relaxation of Carlini & Wagner (2017c). We
use between 100 and 10,000 iterations of gradient descent,
as needed to obtain convergance. The speciÔ¨Åc choice of
optimizer is far less important than choosing to use iterative
optimization-based methods (Madry et al., 2018).
3. Obfuscated Gradients
A defense is said to cause gradient masking if it ‚Äúdoes
not have useful gradients‚Äù for generating adversarial exam-
ples (Papernot et al., 2017); gradient masking is known to
be an incomplete defense to adversarial examples (Papernot
et al., 2017; Tram `er et al., 2018). Despite this, we observe
that 7 of the ICLR 2018 defenses rely on this effect.
To contrast from previous defenses which cause gradient
masking by learning to break gradient descent (e.g., by learn-
ing to make the gradients point the wrong direction (Tram `er
et al., 2018)), we refer to the case where defenses are de-
signed in such a way that the constructed defense necessarily
causes gradient masking as obfuscated gradients . We dis-
cover three ways in which defenses obfuscate gradients (we
use this word because in these cases, it is the defense creator
who has obfuscated the gradient information); we brieÔ¨Çy
deÔ¨Åne and discuss each of them.
Shattered Gradients are caused when a defense is non-
differentiable, introduces numeric instability, or otherwise
causes a gradient to be nonexistent or incorrect . Defenses
that cause gradient shattering can do so unintentionally,
by using differentiable operations but where following the
gradient does not maximize classiÔ¨Åcation loss globally.Obfuscated Gradients Give a False Sense of Security: Circumventing Defenses to Adversarial Examples
Stochastic Gradients are caused by randomized defenses,
where either the network itself is randomized or the input
is randomly transformed before being fed to the classiÔ¨Åer,
causing the gradients to become randomized. This causes
methods using a single sample of the randomness to incor-
rectly estimate the true gradient.
Exploding & Vanishing Gradients are often caused by de-
fenses that consist of multiple iterations of neural network
evaluation, feeding the output of one computation as the
input of the next. This type of computation, when unrolled,
can be viewed as an extremely deep neural network evalua-
tion, which can cause vanishing/exploding gradients.
3.1. Identifying Obfuscated & Masked Gradients
Some defenses intentionally break gradient descent and
cause obfuscated gradients. However, others defenses unin-
tentionally break gradient descent, but the cause of gradient
descent being broken is a direct result of the design of the
neural network. We discuss below characteristic behaviors
of defenses which cause this to occur. These behaviors may
not perfectly characterize all cases of masked gradients.
One-step attacks perform better than iterative attacks.
Iterative optimization-based attacks applied in a white-box
setting are strictly stronger than single-step attacks and
should give strictly superior performance. If single-step
methods give performance superior to iterative methods, it
is likely that the iterative attack is becoming stuck in its
optimization search at a local minimum.
Black-box attacks are better than white-box attacks.
The black-box threat model is a strict subset of the white-
box threat model, so attacks in the white-box setting should
perform better; if a defense is obfuscating gradients, then
black-box attacks (which do not use the gradient) often per-
form better than white-box attacks (Papernot et al., 2017).
Unbounded attacks do not reach 100% success. With
unbounded distortion, any classiÔ¨Åer should have 0%robust-
ness to attack. If an attack does not reach 100% success
with sufÔ¨Åciently large distortion bound, this indicates the
attack is not performing optimally against the defense, and
the attack should be improved.
Random sampling Ô¨Ånds adversarial examples. Brute-
force random search (e.g., randomly sampling 105or more
points) within some -ball should not Ô¨Ånd adversarial exam-
ples when gradient-based attacks do not.
Increasing distortion bound does not increase success.
A larger distortion bound should monotonically increase
attack success rate; signiÔ¨Åcantly increasing distortion bound
should result in signiÔ¨Åcantly higher attack success rate.4. Attack Techniques
Generating adversarial examples through optimization-
based methods requires useful gradients obtained through
backpropagation (Rumelhart et al., 1986). Many defenses
therefore either intentionally or unintentionally cause gradi-
ent descent to fail because of obfuscated gradients caused
by gradient shattering, stochastic gradients, or vanish-
ing/exploding gradients. We discuss a number of techniques
that we develop to overcome obfuscated gradients.
4.1. Backward Pass Differentiable Approximation
Shattered gradients, caused either unintentionally, e.g. by
numerical instability, or intentionally, e.g. by using non-
differentiable operations, result in nonexistent or incorrect
gradients. To attack defenses where gradients are not readily
available, we introduce a technique we call Backward Pass
Differentiable Approximation (BPDA)3.
4.1.1. A S PECIAL CASE:
THESTRAIGHT -THROUGH ESTIMATOR
As a special case, we Ô¨Årst discuss what amounts to the
straight-through estimator (Bengio et al., 2013) applied to
constructing adversarial examples.
Many non-differentiable defenses can be expressed as fol-
lows: given a pre-trained classiÔ¨Åer f(), construct a prepro-
cessorg()and let the secured classiÔ¨Åer ^f(x) =f(g(x))
where the preprocessor g()satisÔ¨Åesg(x)x(e.g., such a
g()may perform image denoising to remove the adversar-
ial perturbation, as in Guo et al. (2018)). If g()is smooth
and differentiable, then computing gradients through the
combined network ^fis often sufÔ¨Åcient to circumvent the
defense (Carlini & Wagner, 2017b). However, recent work
has constructed functions g()which are neither smooth
nor differentiable, and therefore can not be backpropagated
through to generate adversarial examples with a white-box
attack that requires gradient signal.
Becausegis constructed with the property that g(x)x,
we can approximate its derivative as the derivative of the
identity function:rxg(x)rxx= 1. Therefore, we can
approximate the derivative of f(g(x))at the point ^xas:
rxf(g(x))jx=^xrxf(x)jx=g(^x)
This allows us to compute gradients and therefore mount a
white-box attack. Conceptually, this attack is simple. We
perform forward propagation through the neural network as
usual, but on the backward pass, we replace g()with the
identity function. In practice, the implementation can be ex-
pressed in an even simpler way: we approximate rxf(g(x))
by evaluatingrxf(x)at the point g(x). This gives us an
3The BPDA approach can be used on an arbitrary network,
even if it is already differentiable, to obtain a more useful gradient.Obfuscated Gradients Give a False Sense of Security: Circumventing Defenses to Adversarial Examples
approximation of the true gradient, and while not perfect, is
sufÔ¨Åciently useful that when averaged over many iterations
of gradient descent still generates an adversarial example.
The math behind the validity of this approach is similar to
the special case.
4.1.2. G ENERALIZED ATTACK : BPDA
While the above attack is effective for a simple class of
networks expressible as f(g(x))wheng(x)x, it is not
fully general. We now generalize the above approach into
our full attack, which we call Backward Pass Differentiable
Approximation (BPDA).
Letf() =f1:::j()be a neural network, and let fi()be a
non-differentiable (or not usefully-differentiable) layer. To
approximaterxf(x), we Ô¨Årst Ô¨Ånd a differentiable approxi-
mationg(x)such thatg(x)fi(x). Then, we can approxi-
materxf(x)by performing the forward pass through f()
(and in particular, computing a forward pass through fi(x)),
but on the backward pass, replacing fi(x)withg(x). Note
that we perform this replacement only on the backward pass.
As long as the two functions are similar, we Ô¨Ånd that the
slightly inaccurate gradients still prove useful in construct-
ing an adversarial example. Applying BPDA often requires
more iterations of gradient descent than without because
each individual gradient descent step is not exactly correct.
We have found applying BPDA is often necessary: replacing
fi()withg()on both the forward and backward pass is
either completely ineffective (e.g. with Song et al. (2018)) or
many times less effective (e.g. with Buckman et al. (2018)).
4.2. Attacking Randomized ClassiÔ¨Åers
Stochastic gradients arise when using randomized transfor-
mations to the input before feeding it to the classiÔ¨Åer or
when using a stochastic classiÔ¨Åer. When using optimization-
based attacks on defenses that employ these techniques, it is
necessary to estimate the gradient of the stochastic function.
Expectation over Transformation. For defenses that em-
ploy randomized transformations to the input, we apply Ex-
pectation over Transformation (EOT) (Athalye et al., 2017)
to correctly compute the gradient over the expected trans-
formation to the input.
When attacking a classiÔ¨Åer f()that Ô¨Årst randomly trans-
forms its input according to a function t()sampled from a
distribution of transformations T, EOT optimizes the expec-
tation over the transformation EtTf(t(x)). The optimiza-
tion problem can be solved by gradient descent, noting that
rEtTf(t(x)) =EtTrf(t(x)), differentiating through
the classiÔ¨Åer and transformation, and approximating the
expectation with samples at each gradient descent step.4.3. Reparameterization
We solve vanishing/exploding gradients by reparameteriza-
tion. Assume we are given a classiÔ¨Åer f(g(x))whereg()
performs some optimization loop to transform the input x
to a new input ^x. Often times, this optimization loop means
that differentiating through g(), while possible, yields ex-
ploding or vanishing gradients.
To resolve this, we make a change-of-variable x=h(z)
for some function h()such thatg(h(z)) =h(z)for all
z, buth()is differentiable. For example, if g()projects
samples to some manifold in a speciÔ¨Åc manner, we might
constructh(z)to return points exclusively on the manifold.
This allows us to compute gradients through f(h(z))and
thereby circumvent the defense.
5. Case Study: ICLR 2018 Defenses
As a case study for evaluating the prevalence of obfuscated
gradients, we study the ICLR 2018 non-certiÔ¨Åed defenses
that argue robustness in a white-box threat model. Each of
these defenses argues a high robustness to adaptive, white-
box attacks. We Ô¨Ånd that seven of these nine defenses rely
on this phenomenon, and we demonstrate that our tech-
niques can completely circumvent six of those (and partially
circumvent one) that rely on obfuscated gradients. We omit
two defenses with provable security claims (Raghunathan
et al., 2018; Sinha et al., 2018) and one that only argues
black-box security (Tram `er et al., 2018). We include one
paper, Ma et al. (2018), that was not proposed as a defense
per se , but suggests a method to detect adversarial examples.
There is an asymmetry in attacking defenses versus con-
structing robust defenses: to show a defense can be by-
passed, it is only necessary to demonstrate one way to do
so; in contrast, a defender must show no attack can succeed.
Table 1 summarizes our results. Of the 9 accepted papers,
7 rely on obfuscated gradients. Two of these defenses
argue robustness on ImageNet, a much harder task than
CIFAR-10 ; and one argues robustness on MNIST, a much
easier task than CIFAR-10 . As such, comparing defenses
across datasets is difÔ¨Åcult.
5.1. Non-obfuscated Gradients
5.1.1. A DVERSARIAL TRAINING
Defense Details. Originally proposed by Goodfellow
et al. (2014b), adversarial training solves a min-max game
through a conceptually simple process: train on adversarial
examples until the model learns to classify them correctly.
Given training data Xand loss function `(), standard train-
ing chooses network weights as
=arg min
E
(x;y)2X`(x;y;F):Obfuscated Gradients Give a False Sense of Security: Circumventing Defenses to Adversarial Examples
Defense Dataset Distance Accuracy
Buckman et al. (2018) CIFAR 0:031(`1) 0%
Ma et al. (2018) CIFAR 0:031(`1) 5%
Guo et al. (2018) ImageNet 0:005(`2) 0%
Dhillon et al. (2018) CIFAR 0:031(`1) 0%
Xie et al. (2018) ImageNet 0:031(`1) 0%
Song et al. (2018) CIFAR 0:031(`1) 9%
Samangouei et al.
(2018)MNIST 0:005(`2) 55%
Madry et al. (2018) CIFAR 0:031(`1)47%
Na et al. (2018) CIFAR 0:015(`1)15%
Table 1. Summary of Results: Seven of nine defense techniques
accepted at ICLR 2018 cause obfuscated gradients and are vulner-
able to our attacks. Defenses denoted with propose combining
adversarial training; we report here the defense alone, see x5 for
full numbers. The fundamental principle behind the defense de-
noted withhas 0% accuracy; in practice, imperfections cause
the theoretically optimal attack to fail, see x5.4.2 for details.
We study the adversarial training approach of Madry et al.
(2018) which for a given -ball solves
=arg min
E
(x;y)2X
max
2[ ;]N`(x+;y;F)
:
To approximately solve this formulation, the authors solve
the inner maximization problem by generating adversarial
examples using projected gradient descent.
Discussion. We believe this approach does not cause ob-
fuscated gradients: our experiments with optimization-
based attacks do succeed with some probability (but do
not invalidate the claims in the paper). Further, the authors‚Äô
evaluation of this defense performs all of the tests for charac-
teristic behaviors of obfuscated gradients that we list. How-
ever, we note that (1) adversarial retraining has been shown
to be difÔ¨Åcult at ImageNet scale (Kurakin et al., 2016b),
and (2) training exclusively on `1adversarial examples
provides only limited robustness to adversarial examples
under other distortion metrics (Sharma & Chen, 2017).
5.1.2. C ASCADE ADVERSARIAL TRAINING
Cascade adversarial machine learning (Na et al., 2018) is
closely related to the above defense. The main difference
is that instead of using iterative methods to generate ad-
versarial examples at each mini-batch, the authors train a
Ô¨Årst model, generate adversarial examples (with iterative
methods) on that model, add these to the training set, and
then train a second model on the augmented dataset only
single-step methods for efÔ¨Åciency. Additionally, the authors
construct a ‚ÄúuniÔ¨Åed embedding‚Äù and enforce that the clean
and adversarial logits are close under some metric.Discussion. Again, as above, we are unable to reduce the
claims made by the authors. However, these claims are
weaker than other defenses (because the authors correctly
performed a strong optimization-based attack (Carlini &
Wagner, 2017c)): 16% accuracy with =:015, compared
to over 70% at the same perturbation budget with adversarial
training as in Madry et al. (2018).
5.2. Gradient Shattering
5.2.1. T HERMOMETER ENCODING
Defense Details. In contrast to prior work (Szegedy et al.,
2013) which viewed adversarial examples as ‚Äúblind spots‚Äù
in neural networks, Goodfellow et al. (2014b) argue that the
reason adversarial examples exist is that neural networks be-
have in a largely linear manner. The purpose of thermometer
encoding is to break this linearity.
Given an image x, for each pixel color xi;j;c, thel-level ther-
mometer encoding (xi;j;c)is al-dimensional vector where
(xi;j;c)k= 1ififxi;j;c>k=l , and 0otherwise (e.g., for
a 10-level thermometer encoding, (0:66) = 1111110000 ).
Due to the discrete nature of thermometer encoded val-
ues, it is not possible to directly perform gradient descent
on a thermometer encoded neural network. The authors
therefore construct Logit-Space Projected Gradient Ascent
(LS-PGA) as an attack over the discrete thermometer en-
coded inputs. Using this attack, the authors perform the
adversarial training of Madry et al. (2018) on thermometer
encoded networks.
OnCIFAR-10 , just performing thermometer encoding was
found to give 50% accuracy within = 0:031under`1
distortion. By performing adversarial training with 7steps
of LS-PGA, robustness increased to 80%.
Discussion. While the intention behind this defense is to
break the local linearity of neural networks, we Ô¨Ånd that
this defense in fact causes gradient shattering. This can
be observed through their black-box attack evaluation: ad-
versarial examples generated on a standard adversarially
trained model transfer to a thermometer encoded model re-
ducing the accuracy to 67%, well below the 80% robustness
to the white-box iterative attack.
Evaluation. We use the BPDA approach from x4.1.2,
where we let f(x) =(x). Observe that if we deÔ¨Åne
^(xi;j;c)k= min(max( xi;j;c k=l;0);1)
then
(xi;j;c)k=Ô¨Çoor(^(xi;j;c)k)
so we can let g(x) = ^(x)and replace the backwards pass
with the function g().Obfuscated Gradients Give a False Sense of Security: Circumventing Defenses to Adversarial Examples
LS-PGA only reduces model accuracy to 50% on a
thermometer-encoded model trained without adversarial
training (bounded by = 0:031). In contrast, we achieve
1%model accuracy with the lower = 0:015(and0%with
= 0:031). This shows no measurable improvement from
standard models, trained without thermometer encoding.
When we attack a thermometer-encoded adversarially
trained model4, we are able to reproduce the 80% accu-
racy at= 0:031claim against LS-PGA. However, our
attack reduces model accuracy to 30%. This is signiÔ¨Åcantly
weaker than the original Madry et al. (2018) model that
does not use thermometer encoding. Because this model is
trained against the (comparatively weak) LS-PGA attack, it
is unable to adapt to the stronger attack we present above.
5.2.2. I NPUT TRANSFORMATIONS
Defense Details. Guo et al. (2018) propose Ô¨Åve input
transformations to counter adversarial examples.
As a baseline, the authors evaluate image cropping and
rescaling ,bit-depth reduction , and JPEG compression .
Then the authors suggest two new transformations: (a) ran-
domly drop pixels and restore them by performing total
variance minimization ; and (b) image quilting : reconstruct
images by replacing small patches with patches from ‚Äúclean‚Äù
images, using minimum graph cuts in overlapping boundary
regions to remove edge artifacts.
The authors explore different combinations of input trans-
formations along with different underlying ImageNet classi-
Ô¨Åers, including adversarially trained models. They Ô¨Ånd that
input transformations provide protection even with a vanilla
classiÔ¨Åer.
Discussion. The authors Ô¨Ånd that a ResNet-50 classiÔ¨Åer
provides a varying degree of accuracy for each of the Ô¨Åve
proposed input transformations under the strongest attack
with a normalized `2dissimilarity of 0:01, with the strongest
defenses achieving over 60% top-1 accuracy. We reproduce
these results when evaluating an InceptionV3 classiÔ¨Åer.
The authors do not succeed in white-box attacks, credit-
ing lack of access to test-time randomness as ‚Äúparticularly
crucial in developing strong defenses‚Äù (Guo et al., 2018).5
Evaluation. It is possible to bypass each defense inde-
pendently (and ensembles of defenses usually are not much
stronger than the strongest sub-component (He et al., 2017)).
We circumvent image cropping and rescaling with a direct
4That is, a thermometer encoded model that is trained using
the approach of (Madry et al., 2018).
5This defense may be stronger in a threat model where the
adversary does not have complete information about the exact
quilting process used (personal communication with authors).application of EOT. To circumvent bit-depth reduction and
JPEG compression, we use BPDA and approximate the
backward pass with the identity function. To circumvent
total variance minimization and image quilting, which are
both non-differentiable and randomized, we apply EOT and
use BPDA to approximate the gradient through the transfor-
mation. With our attack, we achieve 100% targeted attack
success rate and accuracy drops to 0%for the strongest de-
fense under the smallest perturbation budget considered in
Guo et al. (2018), a root-mean-square perturbation of 0:05
(and a ‚Äúnormalized‚Äù `2perturbation as deÔ¨Åned in Guo et al.
(2018) of 0:01).
5.2.3. L OCAL INTRINSIC DIMENSIONALITY (LID)
LID is a general-purpose metric that measures the distance
from an input to its neighbors. Ma et al. (2018) propose
using LID to characterize properties of adversarial examples.
The authors emphasize that this classiÔ¨Åer is not intended as a
defense against adversarial examples6, however the authors
argue that it is a robust method for detecting adversarial
examples that is not easy to evade by attempting their own
adaptive attack and showing it fails.
Analysis Overview. Instead of actively attacking the de-
tection method, we Ô¨Ånd that LID is not able to detect high
conÔ¨Ådence adversarial examples (Carlini & Wagner, 2017a),
even in the unrealistic threat model where the adversary is
entirely oblivious to the defense and generates adversarial
examples on the original classiÔ¨Åer. A full discussion of this
attack is given in Supplement Section 1.
5.3. Stochastic Gradients
5.3.1. S TOCHASTIC ACTIVATION PRUNING (SAP)
Defense Details. SAP (Dhillon et al., 2018) introduces
randomness into the evaluation of a neural network to de-
fend against adversarial examples. SAP randomly drops
some neurons of each layer fito 0 with probability pro-
portional to their absolute value. That is, SAP essentially
applies dropout at each layer where instead of dropping with
uniform probability, nodes are dropped with a weighted dis-
tribution. Values which are retained are scaled up (as is
done in dropout) to retain accuracy. Applying SAP de-
creases clean classiÔ¨Åcation accuracy slightly, with a higher
drop probability decreasing accuracy, but increasing robust-
ness. We study various levels of drop probability and Ô¨Ånd
they lead to similar robustness numbers.
Discussion. The authors only evaluate SAP by taking a
single step in the gradient direction (Dhillon et al., 2018).
While taking a single step in the direction of the gradient
6Personal communication with authors.Obfuscated Gradients Give a False Sense of Security: Circumventing Defenses to Adversarial Examples
can be effective on non-randomized neural networks, when
randomization is used, computing the gradient with respect
to one sample of the randomness is ineffective.
Evaluation. To resolve this difÔ¨Åculty, we estimate the gra-
dients by computing the expectation over instantiations of
randomness. At each iteration of gradient descent, instead
of taking a step in the direction of rxf(x)we move in the
direction ofPk
i=1rxf(x)where each invocation is ran-
domized with SAP. We have found that choosing k= 10
provides useful gradients. We additionally had to resolve
a numerical instability when computing gradients: this de-
fense caused computing a backward pass to cause exploding
gradients due to division by numbers very close to 0.
With these approaches, we are able to reduce SAP model
accuracy to 9%at=:015, and 0%at= 0:031. If
we consider an attack successful only when an example
is classiÔ¨Åed incorrectly 10times out of 10(and consider it
correctly classiÔ¨Åed if it is ever classiÔ¨Åed as the correct label),
model accuracy is below 10% with= 0:031.
5.3.2. M ITIGATING THROUGH RANDOMIZATION
Defense Details. Xie et al. (2018) propose to defend
against adversarial examples by adding a randomization
layer before the input to the classiÔ¨Åer. For a classiÔ¨Åer that
takes a 299299input, the defense Ô¨Årst randomly rescales
the image to a rrimage, with r2[299;331), and then
randomly zero-pads the image so that the result is 331331.
The output is then fed to the classiÔ¨Åer.
Discussion. The authors consider three attack scenarios:
vanilla attack (an attack on the original classiÔ¨Åer), single-
pattern attack (an attack assuming some Ô¨Åxed randomization
pattern), and ensemble-pattern attack (an attack over a small
ensemble of Ô¨Åxed randomization patterns). The authors
strongest attack reduces InceptionV3 model accuracy to
32:8%top-1 accuracy (over images that were originally
classiÔ¨Åed correctly).
The authors dismiss a stronger attack over larger choices
of randomness, stating that it would be ‚Äúcomputationally
impossible ‚Äù (emphasis ours) and that such an attack ‚Äúmay
not even converge‚Äù (Xie et al., 2018).
Evaluation. We Ô¨Ånd the authors‚Äô ensemble attack overÔ¨Åts
to the ensemble with Ô¨Åxed randomization. We bypass this
defense by applying EOT, optimizing over the (in this case,
discrete) distribution of transformations.
Using this attack, even if we consider the attack successful
only when an example is classiÔ¨Åed incorrectly 10times out
of10, we achieve 100% targeted attack success rate and
reduce the accuracy of the classiÔ¨Åer from 32:8%to0:0%
with a maximum `1perturbation of = 0:031.5.4. Vanishing & Exploding Gradients
5.4.1. P IXEL DEFEND
Defense Details. Song et al. (2018) propose using a
PixelCNN generative model to project a potential adver-
sarial example back onto the data manifold before feeding
it into a classiÔ¨Åer. The authors argue that adversarial ex-
amples mainly lie in the low-probability region of the data
distribution. PixelDefend ‚ÄúpuriÔ¨Åes‚Äù adversarially perturbed
images prior to classiÔ¨Åcation by using a greedy decoding
procedure to approximate Ô¨Ånding the highest probability
example within an -ball of the input image.
Discussion. The authors evaluate PixelDefend on
CIFAR-10 over various classiÔ¨Åers and perturbation budgets.
With a maximum `1perturbation of = 0:031, PixelDe-
fend claims 46% accuracy (with a vanilla ResNet classiÔ¨Åer).
The authors dismiss the possibility of end-to-end attacks on
PixelDefend due to the difÔ¨Åculty of differentiating through
an unrolled version of PixelDefend due to vanishing
gradients and computation cost.
Evaluation. We sidestep the problem of computing gradi-
ents through an unrolled version of PixelDefend by approxi-
mating gradients with BPDA, and we successfully mount
an end-to-end attack using this technique7. With this attack,
we can reduce the accuracy of a naturally trained classiÔ¨Åer
which achieves 95% accuracy to 9%with a maximum `1
perturbation of = 0:031. We Ô¨Ånd that combining adversar-
ial training (Madry et al., 2018) with PixelDefend provides
no additional robustness over just using the adversarially
trained classiÔ¨Åer.
5.4.2. D EFENSE -GAN
Defense-GAN (Samangouei et al., 2018) uses a Generative
Adversarial Network (Goodfellow et al., 2014a) to project
samples onto the manifold of the generator before classi-
fying them. That is, the intuition behind this defense is
nearly identical to PixelDefend, but using a GAN instead
of a PixelCNN. We therefore summarize results here and
present the full details in Supplement Section 2.
Analysis Overview. Defense-GAN is not argued secure
on CIFAR-10, so we use MNIST. We Ô¨Ånd that adversarial
examples exist on the manifold deÔ¨Åned by the generator.
That is, we show that we are able to construct an adversarial
examplex0=G(z)so thatx0xbutc(x)6=c(x0). As
such, a perfect projector would not modify this example x0
because it exists on the manifold described by the generator.
However, while this attack would defeat a perfect projector
7In place of a PixelCNN, due to the availability of a pre-trained
model, we use a PixelCNN++ (Salimans et al., 2017) and discretize
the mixture of logistics to produce a 256-way softmax.Obfuscated Gradients Give a False Sense of Security: Circumventing Defenses to Adversarial Examples
mappingxto its nearest point on G(z), the imperfect gradi-
ent descent based approach taken by Defense-GAN does not
perfectly preserve points on the manifold. We therefore con-
struct a second attack using BPDA to evade Defense-GAN,
although at only a 45% success rate.
6. Discussion
Having demonstrated attacks on these seven defenses, we
now take a step back and discuss the method of evaluating a
defense against adversarial examples.
The papers we study use a variety of approaches in eval-
uating robustness of the proposed defenses. We list what
we believe to be the most important points to keep in mind
while building and evaluating defenses. Much of what we
describe below has been discussed in prior work (Carlini &
Wagner, 2017a; Madry et al., 2018); we repeat these points
here and offer our own perspective for completeness.
6.1. DeÔ¨Åne a (realistic) threat model
A threat model speciÔ¨Åes the conditions under which a de-
fense argues security: a precise threat model allows for an
exact understanding of the setting under which the defense is
meant to work. Prior work has used words including white-
box,grey-box ,black-box , and no-box to describe slightly
different threat models, often overloading the same word.
Instead of attempting to, yet again, redeÔ¨Åne the vocabulary,
we enumerate the various aspects of a defense that might
be revealed to the adversary or held secret to the defender:
model architecture andmodel weights ;training algorithm
andtraining data ; test time randomness (either the values
chosen or the distribution); and, if the model weights are
held secret, whether query access is allowed (and if so, the
type of output, e.g. logits or only the top label).
While there are some aspects of a defense that might be
held secret, threat models should not contain unrealistic
constraints. We believe any compelling threat model should
at the very least grant knowledge of the model architecture,
training algorithm, and allow query access.
It is not meaningful to restrict the computational power of
an adversary artiÔ¨Åcially (e.g., to fewer than several thousand
attack iterations). If two defenses are equally robust but gen-
erating adversarial examples on one takes one second and
another takes ten seconds, the robustness has not increased .
6.2. Make speciÔ¨Åc, testable claims
SpeciÔ¨Åc, testable claims in a clear threat model precisely
convey the claimed robustness of a defense. For example, a
complete claim might be: ‚ÄúWe achieve 90% accuracy when
bounded by`1distortion with = 0:031, when the attacker
has full white-box access.‚ÄùIn this paper, we study all papers under the threat model
the authors deÔ¨Åne. However, if a paper is evaluated under
adifferent threat model, explicitly stating so makes it clear
that the original paper‚Äôs claims are not being violated.
A defense being speciÔ¨Åed completely, with all hyperpa-
rameters given, is a prerequisite for claims to be testable.
Releasing source code and a pre-trained model along with
the paper describing a speciÔ¨Åc threat model and robustness
claims is perhaps the most useful method of making testable
claims. At the time of writing this paper, four of the defenses
we study made complete source code available (Madry et al.,
2018; Ma et al., 2018; Guo et al., 2018; Xie et al., 2018).
6.3. Evaluate against adaptive attacks
A strong defense is robust not only against existing attacks,
butalso against future attacks within the speciÔ¨Åed threat
model. A necessary component of any defense proposal is
therefore an attempt at an adaptive attack.
Anadaptive attack is one that is constructed after a defense
has been completely speciÔ¨Åed, where the adversary takes ad-
vantage of knowledge of the defense and is only restricted by
the threat model. One useful attack approach is to perform
many attacks and report the mean over the best attack per im-
age. That is, for a set of attacks a2A instead of reporting
the value min
a2Amean
x2Af(a(x))report mean
x2Amin
a2Af(a(x)).
If a defense is modiÔ¨Åed after an evaluation, an adaptive
attack is one that considers knowledge of the newdefense.
In this way, concluding an evaluation with a Ô¨Ånal adaptive
attack can be seen as analogous to evaluating a model on
the test data.
7. Conclusion
Constructing defenses to adversarial examples requires de-
fending against not only existing attacks but also future
attacks that may be developed. In this paper, we identify
obfuscated gradients , a phenomenon exhibited by certain
defenses that makes standard gradient-based methods fail
to generate adversarial examples. We develop three attack
techniques to bypass three different types of obfuscated gra-
dients. To evaluate the applicability of our techniques, we
use the ICLR 2018 defenses as a case study, circumventing
seven of nine accepted defenses.
More generally, we hope that future work will be able to
avoid relying on obfuscated gradients (and other methods
that only prevent gradient descent-based attacks) for per-
ceived robustness, and use our evaluation approach to detect
when this occurs. Defending against adversarial examples
is an important area of research and we believe performing
a careful, thorough evaluation is a critical step that can not
be overlooked when designing defenses.Obfuscated Gradients Give a False Sense of Security: Circumventing Defenses to Adversarial Examples
Acknowledgements
We are grateful to Aleksander Madry, Andrew Ilyas, and
Aditi Raghunathan for helpful comments on an early draft
of this paper. We thank Bo Li, Xingjun Ma, Laurens van der
Maaten, Aurko Roy, Yang Song, and Cihang Xie for useful
discussion and insights on their defenses.
This work was partially supported by the National Science
Foundation through award CNS-1514457, Qualcomm, and
the Hewlett Foundation through the Center for Long-Term
Cybersecurity.
References
Athalye, A., Engstrom, L., Ilyas, A., and Kwok, K. Syn-
thesizing robust adversarial examples. arXiv preprint
arXiv:1707.07397 , 2017.
Bengio, Y ., L ¬¥eonard, N., and Courville, A. Estimating or
propagating gradients through stochastic neurons for con-
ditional computation. arXiv preprint arXiv:1308.3432 ,
2013.
Biggio, B., Corona, I., Maiorca, D., Nelson, B., ÀáSrndi ¬¥c, N.,
Laskov, P., Giacinto, G., and Roli, F. Evasion attacks
against machine learning at test time. In Joint European
Conference on Machine Learning and Knowledge Dis-
covery in Databases , pp. 387‚Äì402. Springer, 2013.
Buckman, J., Roy, A., Raffel, C., and Goodfellow, I. Ther-
mometer encoding: One hot way to resist adversarial ex-
amples. International Conference on Learning Represen-
tations , 2018. URL https://openreview.net/
forum?id=S18Su--CW . accepted as poster.
Carlini, N. and Wagner, D. Adversarial examples are not
easily detected: Bypassing ten detection methods. AISec ,
2017a.
Carlini, N. and Wagner, D. Magnet and ‚ÄúefÔ¨Åcient defenses
against adversarial attacks‚Äù are not robust to adversarial
examples. arXiv preprint arXiv:1711.08478 , 2017b.
Carlini, N. and Wagner, D. Towards evaluating the robust-
ness of neural networks. In IEEE Symposium on Security
& Privacy , 2017c.
Dhillon, G. S., Azizzadenesheli, K., Bernstein, J. D., Kos-
saiÔ¨Å, J., Khanna, A., Lipton, Z. C., and Anandkumar,
A. Stochastic activation pruning for robust adversarial
defense. International Conference on Learning Represen-
tations , 2018. URL https://openreview.net/
forum?id=H1uR4GZRZ . accepted as poster.
Goodfellow, I., Pouget-Abadie, J., Mirza, M., Xu, B.,
Warde-Farley, D., Ozair, S., Courville, A., and Bengio,
Y . Generative adversarial nets. In Advances in neural
information processing systems , pp. 2672‚Äì2680, 2014a.Goodfellow, I. J., Shlens, J., and Szegedy, C. Explain-
ing and harnessing adversarial examples. arXiv preprint
arXiv:1412.6572 , 2014b.
Guo, C., Rana, M., Cisse, M., and van der Maaten, L. Coun-
tering adversarial images using input transformations.
International Conference on Learning Representations ,
2018. URL https://openreview.net/forum?
id=SyJ7ClWCb . accepted as poster.
He, K., Zhang, X., Ren, S., and Sun, J. Deep residual learn-
ing for image recognition. In Proceedings of the IEEE
conference on computer vision and pattern recognition ,
pp. 770‚Äì778, 2016.
He, W., Wei, J., Chen, X., Carlini, N., and Song, D. Adver-
sarial example defenses: Ensembles of weak defenses are
not strong. arXiv preprint arXiv:1706.04701 , 2017.
Kurakin, A., Goodfellow, I., and Bengio, S. Adversar-
ial examples in the physical world. arXiv preprint
arXiv:1607.02533 , 2016a.
Kurakin, A., Goodfellow, I. J., and Bengio, S. Ad-
versarial machine learning at scale. arXiv preprint
arXiv:1611.01236 , 2016b.
Ma, X., Li, B., Wang, Y ., Erfani, S. M., Wijewickrema, S.,
Schoenebeck, G., Houle, M. E., Song, D., and Bailey, J.
Characterizing adversarial subspaces using local intrinsic
dimensionality. International Conference on Learning
Representations , 2018. URL https://openreview.
net/forum?id=B1gJ1L2aW . accepted as oral pre-
sentation.
Madry, A., Makelov, A., Schmidt, L., Tsipras, D., and
Vladu, A. Towards deep learning models resistant to ad-
versarial attacks. International Conference on Learning
Representations , 2018. URL https://openreview.
net/forum?id=rJzIBfZAb . accepted as poster.
Na, T., Ko, J. H., and Mukhopadhyay, S. Cascade adver-
sarial machine learning regularized with a uniÔ¨Åed embed-
ding. In International Conference on Learning Represen-
tations , 2018. URL https://openreview.net/
forum?id=HyRVBzap- .
Papernot, N., McDaniel, P., Goodfellow, I., Jha, S., Ce-
lik, Z. B., and Swami, A. Practical black-box attacks
against machine learning. In Proceedings of the 2017
ACM on Asia Conference on Computer and Communica-
tions Security , ASIA CCS ‚Äô17, pp. 506‚Äì519, New York,
NY , USA, 2017. ACM. ISBN 978-1-4503-4944-4. doi:
10.1145/3052973.3053009. URL http://doi.acm.
org/10.1145/3052973.3053009 .Obfuscated Gradients Give a False Sense of Security: Circumventing Defenses to Adversarial Examples
Raghunathan, A., Steinhardt, J., and Liang, P. CertiÔ¨Åed de-
fenses against adversarial examples. International Confer-
ence on Learning Representations , 2018. URL https:
//openreview.net/forum?id=Bys4ob-Rb .
Rumelhart, D. E., Hinton, G. E., and Williams, R. J. Learn-
ing representations by back-propagating errors. Nature ,
323:533‚Äì536, 1986.
Salimans, T., Karpathy, A., Chen, X., and Kingma, D. P.
Pixelcnn++: A pixelcnn implementation with discretized
logistic mixture likelihood and other modiÔ¨Åcations. In
ICLR , 2017.
Samangouei, P., Kabkab, M., and Chellappa, R. Defense-
gan: Protecting classiÔ¨Åers against adversarial attacks
using generative models. International Conference
on Learning Representations , 2018. URL https://
openreview.net/forum?id=BkJ3ibb0- . ac-
cepted as poster.
Sharma, Y . and Chen, P.-Y . Attacking the madry de-
fense model with L1-based adversarial examples. arXiv
preprint arXiv:1710.10733 , 2017.
Sinha, A., Namkoong, H., and Duchi, J. CertiÔ¨Åable distri-
butional robustness with principled adversarial training.
International Conference on Learning Representations ,
2018. URL https://openreview.net/forum?
id=Hk6kPgZA- .
Song, Y ., Kim, T., Nowozin, S., Ermon, S., and Kush-
man, N. Pixeldefend: Leveraging generative models
to understand and defend against adversarial examples.
International Conference on Learning Representations ,
2018. URL https://openreview.net/forum?
id=rJUYGxbCW . accepted as poster.
Szegedy, C., Zaremba, W., Sutskever, I., Bruna, J., Erhan,
D., Goodfellow, I., and Fergus, R. Intriguing properties
of neural networks. ICLR , 2013.
Szegedy, C., Vanhoucke, V ., Ioffe, S., Shlens, J., and Wojna,
Z. Rethinking the inception architecture for computer
vision. In Proceedings of the IEEE Conference on Com-
puter Vision and Pattern Recognition , pp. 2818‚Äì2826,
2016.
Tram `er, F., Kurakin, A., Papernot, N., Goodfellow, I.,
Boneh, D., and McDaniel, P. Ensemble adversarial train-
ing: Attacks and defenses. International Conference
on Learning Representations , 2018. URL https://
openreview.net/forum?id=rkZvSe-RZ . ac-
cepted as poster.
Xie, C., Wang, J., Zhang, Z., Ren, Z., and Yuille, A. Mit-
igating adversarial effects through randomization. In-
ternational Conference on Learning Representations ,2018. URL https://openreview.net/forum?
id=Sk9yuql0Z . accepted as poster.
Zagoruyko, S. and Komodakis, N. Wide residual networks.
arXiv preprint arXiv:1605.07146 , 2016.